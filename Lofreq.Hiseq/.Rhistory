pos<-x$Position
seg<-x$Segment[1]
expected.pos<-seq.int(from=1,to=regions.bed$stop[regions.bed$chr==seg],by=1)
missing<-which(!(expected.pos %in% pos))
rows<-length(missing)
sample<-x$Sample[1]
data.frame(Segment=rep(seg,times=rows),Position=missing,Coverage=rep(0,times=rows),Sample=rep(sample,times=rows))
}
z.cov<-ddply(cov.df,~Sample+Segment,fill.cov)
cov.df<-rbind(cov.df,z.cov)
cov.df<-cov.df[order(cov.df$Sample,cov.df$Segment,cov.df$Position),] # reorder to account for the added data
head(z.cov)
cov.df<-read.csv("../worked_data/05_coverage/all.cov.csv",stringsAsFactor=F)
z.cov<-ddply(cov.df,~Sample+Segment,fill.cov)
cov.df<-rbind(cov.df,z.cov)
head (cov.df)
z.cov<-ddply(cov.df,~Sample+Segment,fill.cov)
cov.df<-read.csv("../worked_data/05_coverage/all.cov.csv",stringsAsFactor=F)
cov.df$Segment[cov.df$Segment=="N_A"]<-as.character("NA")
cov.df$Segment<-factor(cov.df$Segment,levels=c("PB2","PB1","PA","HA","NP","NA","M","NS"))
z.cov<-ddply(cov.df,~Sample+Segment,fill.cov)
cov.df<-rbind(cov.df,z.cov)
cov.df<-cov.df[order(cov.df$Sample,cov.df$Segment,cov.df$Position),] # reorder to account for the added data
slideFunct <- function(data, window, step){ #dapted from http://coleoguy.blogspot.com/2014/04/sliding-window-analysis.html
coverage<-data$Coverage
pos<-data$Position
# c.pos<-data$concat.pos
total <- length(coverage)
spots <- seq(from=1, to=(total-window), by=step)
result <- data.frame(mean=rep(F,times=length(spots)),pos=rep(F,times=length(spots)))
for(i in 1:length(spots)){
result$mean[i] <- mean(coverage[spots[i]:(spots[i]+window)])
result$pos[i]<-mean(pos[spots[i]:(spots[i]+window)])
#result$concat.pos[i]<-mean(c.pos[spots[i]:(spots[i]+window)])
}
return(result)
}
wind<-100
step<-100
cov.slid.df<-ddply(cov.df,~Sample+Segment,function(x) slideFunct(x,window = wind,step=step))
cov.slid.df<-mutate(cov.slid.df, # the concatenated position relative to the usual order
concat.pos=pos+prior.seg.length[match(Segment,regions.bed$chr)]) # position is relative to each segement
cov.plot<-ggplot(cov.slid.df,
mapping=aes(x=as.factor(concat.pos),
y=mean,fill=Segment))+geom_boxplot()
cov.plot<-cov.plot+ggtitle("Sequencing coverage")+ylab("Read depth")+xlab("")+xlab("Concatenated Genome Position")
cov.plot<-cov.plot+scale_x_discrete(labels = "")#+scale_y_continuous(limits=c(0,35000),breaks=c(10000,20000,30000))
cov.plot<-cov.plot+theme(axis.title.y = element_text(vjust=1.2))
cov.plot<-cov.plot+theme(legend.position="top",legend.text=element_text(size=18))
cov.plot
sum.df<-read.csv("../worked_data/mapq//all.sum.csv")
dim(sum.df)[1]
sum.df
kabel(sum.df,digits=2)
kable(sum.df,digits=2)
require(knitr)
kable(sum.df,digits=2)
filter.df<-susbet(sum.df,p.val<0.01 & Read_pos>50 & Read_pos<200)
filter.df
filter.df<-subset(sum.df,p.val<0.01 & Read_pos>50 & Read_pos<200)
filter.df
kable(filter.df,digits=2)
?matplot
out<-matrix(nrow = 30,ncol = 6)
freq<-c(0.05,0.02,0.01,0.005,0.002,0.001)
out[1,]<-10^gc_ul*14*freq
gc_ul<-5
out[1,]<-10^gc_ul*14*freq
out
true_pcr<-function(gc_ul){
out<-matrix(nrow = 31,ncol = 6)
freq<-c(0.05,0.02,0.01,0.005,0.002,0.001)
out[1,]<-10^gc_ul*14*freq
for(i in 2:31){
out[i,]<-out[i-1,]*2
}
return(out)
}
true_pcr(5)
true_pcr(5)->x
matplot(x)
matplot(x,type="l")
?matplot
matplot(x,type="l",lty=1,lwd=2)
matplot(x,type="l",lty=1,lwd=2)+legend(c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2) ;legend(c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2) ;legend(legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2) ;legend(x = 1,y=1,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2) ;legend(x = 5,y=1e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2) ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2,logy=T) ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
warnings()
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
true_pcr<-function(freq){
out<-matrix(nrow = 31,ncol = 6)
gc_ul<-c(5,4,3,2)
out[1,]<-10^gc_ul*14*freq
for(i in 2:31){
out[i,]<-out[i-1,]*2
}
return(out)
}
true_pcr(0.05)->x
true_pcr<-function(freq){
out<-matrix(nrow = 31,ncol = 4)
gc_ul<-c(5,4,3,2)
out[1,]<-10^gc_ul*14*freq
for(i in 2:31){
out[i,]<-out[i-1,]*2
}
return(out)
}
true_pcr(0.05)->x
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col=c(black,red,green,blue))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col=c("black","red","green","blue"))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("5%","2%","1%","0.5%","0.2%","0.1%"))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col=c("black","red","green","blue"))
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col = red)
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr
error_pcr[1:9,2]<-0
error_pcr[10,2]<1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
error_pcr
matplot(error_pcr,type="l",lty=2,add=T)
true_pcr(3)->x
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
true_pcr(.02)->x
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
plot(x[,4]-error_pcr[,1])
matplot(x,type="l",lty=1,lwd=2) ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
true_pcr(.002)->x
matplot(x,type="l",lty=1,lwd=2) ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
plot(x[,4]-error_pcr[,1])
matplot(x,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
plot(x[,4]-error_pcr[,1])
out<-matrix(nrow = 31,ncol = 4)
gc_ul<-c(5,4,3,2)
for(i in 2:31){
out[i,]<-out[i-1,]*2
}
matplot(out,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col = red)
out
out[1,]<-10^gc_ul*14*freq
out[1,]<-10^gc_ul*14*0.001
for(i in 2:31){
out[i,]<-out[i-1,]*2
}
matplot(out,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e13,legend = c("10^5","10^4","10^3","10^2"),col = red)
matplot(out,type="l",lty=1,lwd=2,log="y") ;legend(x = 5,y=6e9,legend = c("10^5","10^4","10^3","10^2"),col = red)
legend(x = 5,y=6e9,legend = c("10^5","10^4","10^3","10^2"),col = c("black","red","green","blue"))
legend(x = 5,y=6e9,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
legend(x = 5,y=6e9,pch=2,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
legend(x = 5,y=6e9,pch=1,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
legend(x = 5,y=6e9,pch=10,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
legend(x = 5,y=6e9,pch=11,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
legend(x = 5,y=6e9,pch=16,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
error_pcr<-matrix(nrow=31,ncol=2)
error_pcr[1,1]<-1
for(i in 2:31){
error_pcr[i,1]<-error_pcr[i-1,1]*2
}
error_pcr
error_pcr[1:9,2]<-0
error_pcr[10,2]<-1
for(i in 11:31){
error_pcr[i,2]<-error_pcr[i-1,2]*2
}
matplot(error_pcr,type="l",lty=2,add=T)
matplot(out,type="l",lty=1,lwd=2,log="y",title="Mutant copy number over time")
matplot(out,type="l",lty=1,lwd=2,log="y",main="Mutant copy number over time")
matplot(error_pcr,type="l",lty=2,add=T)
legend(x = 5,y=6e9,pch=16,legend = c("10^5","10^4","10^3","10^2"),col = c(1:4))
matplot(error_pcr,type="l",lty=2,add=T,col=c(5,6))
legend(x = 5,y=6e9,pch=16,legend = c("10^5","10^4","10^3","10^2","Error at cylce 1","Error at cycle 10"),col = c(1:6))
legend(x = 5,y=6e12,pch=16,legend = c("10^5","10^4","10^3","10^2","Error at cylce 1","Error at cycle 10"),col = c(1:6))
legend(x = 5,y=6e11,pch=16,legend = c("10^5","10^4","10^3","10^2","Error at cylce 1","Error at cycle 10"),col = c(1:6))
x<-dbinom(x = c(0:100),size = 10^3*14,prob = 0.02)
x
plot(x)
x<-dbinom(x = c(250:330),size = 10^3*14,prob = 0.02)
plot(x)
x<-dbinom(x = c(250:330),size = 10^3*14*.2,prob = 0.02)
plot(x)
x<-dbinom(x = c(0:200),size = 10^3*14*.2,prob = 0.02)
plot(x)
?dbinom
x<-rbinom(n=20,size = 10^3*14*.2,prob = 0.02)
x
x<-dbinom(x = c(0:200),size = 10^3*14*.01,prob = 0.02)
x<-rbinom(n=20,size = 10^3*14*.2,prob = 0.02)
x
x<-rbinom(n=20,size = 10^3*14*.02,prob = 0.02)
x<-rbinom(n=20,size = 10^3*14*.2,prob = 0.002)
x
(x/10^3*14*.2)*100
(x/(10^3*14*.2))*100
x<-rbinom(n=20,size = 10^5*14*.2,prob = 0.005)
x
post_pcr<-x*2^30
post_pcr
total_post_pcr<-10^5*14*.2*2^30
total_post_pcr
post_pcr/total_post_pcr
mw<-13000*650
mole<-6.022e22
total_ng<-(total_post_pcr/mole)/mw
total_ng
total_ng<-(total_post_pcr/mole)*mw*1e9
total_ng
log10(total_ng)
10^5*14*.2
dntps<-0.4*0.0125 # mols/mL * 12.5 uL
dntps
dntps<-0.4*0.0125*mole # mols/mL * 12.5 uL
dntps
dntps<-0.4*0.0125*mole*4 # mols/mL * 12.5 uL * 4 for each nucleotide
starting_genomes<-10^5*14*.2
error_pcr[1,1]<-starting_genomes
genomes<-matrix(nrow=31,ncol=1)
genomes[1,1]<-starting_genomes
for(i in 2:31){
genomes[i,1]<-genomes[i-1,1]*2
}
data.frame(cycle=c(0:30),genomes=genomes[,1])
dnpts.df<-data.frame(cycle=c(0:30),genomes=genomes[,1])
require(plyr)
dntps.left<-matrix(nrow=31,ncol=1)
dntps.left[1,1]<-dntps
for(i in 2:31){
dntps.left[i,1]<-dntps.left[i-1,1]-(genomes[i-1,1]*13000)
}
dnpts.df<-data.frame(cycle=c(0:30),genomes=genomes[,1],dntps=dntps.left[,1])
dntps.df<-data.frame(cycle=c(0:30),genomes=genomes[,1],dntps=dntps.left[,1])
dntps.df
primers<-10*.2*mol
primers<-10*.2*mols
primers<-10*.2*moles
primers<-10*.2*mole
primers
x<-c("A","T","C","G")
x
x[1]
cat(x[1],x[2])
y<-randu
y
y<-round(runif(n = 9,min = 1,max = 4),1)
y
y<-round(runif(n = 9,min = 1,max = 4),0)
y
for( i in 1:1000){
primers<-c()
for( i in 1:1000){
y<-round(runif(n = 9,min = 1,max = 4),0)
primers[i]<-x[y]
}
warnings
warnings()
for( i in 1:1000){
y<-round(runif(n = 9,min = 1,max = 4),0)
primers[i]<-cat(x[y])
}
y
x
cat(x[y])
paste0(x[y])
x[y]
paste0(x[1],x[2])
paste0(x[1:2])
paste(x[y],collapes="")
z<-x[y]
paste(z,collapes="")
z
length(z)
gsub(", ","",toString(z))
for( i in 1:1000){
y<-round(runif(n = 9,min = 1,max = 4),0)
primers[i]<-gsub(", ","",toString(x[y]))
}
primers
unique(primers)
unique(primers)->unique(primers)
unique(primers)->u.primers
substitution_distance <- function(s1,s2) { mapply(function(c1,c2) sum(c1!=c2), strsplit(s1,''), strsplit(s2,'')) }
for( i in 1:length(u.primers)){}
for( i in 1:length(u.primers)){
for(j in i+1:length(u.prmers)){
dist.mat[i,j]<-substitution_distance(u.primers[i],u.primers[j])
}
dist.mat<-matrix(nrow=length(u.primers),ncol = length(u.primers))
for( i in 1:length(u.primers)){
for(j in i+1:length(u.prmers)){
dist.mat[i,j]<-substitution_distance(u.primers[i],u.primers[j])
for( i in 1:length(u.primers)){
for(j in i+1:length(u.prmers)){
for( i in 1:length(u.primers)){
for(j in i+1:length(u.primers)){
dist.mat[i,j]<-substitution_distance(u.primers[i],u.primers[j])
}}
dist.mat
dim(dist.mat)
for( i in 1:length(u.primers)){
for(j in i+1:length(u.primers)){
dist.mat[i,j]<-substitution_distance(u.primers[i],u.primers[j])
}}
substitution_distance(u.primers[1],u.primers[2]
)
head(dist.mat)
setwd("~/Box Sync/Lab_work/NGS/Benchmarking/results/2015-09-24")
require(knitr)
wd<-tail(strsplit(getwd(),"/")[[1]],n=1)
opts_chunk$set(cache=T,echo=F,fig.align='center',message=F,warning=F,fig.path=paste0("../mark_down.figs/",wd,"estimating_dispersion"))
require(plyr)
require(ggplot2)
require(pROC)
require(reshape2)
require(Biostrings)
#require(deepSNV)
theme_set(theme_classic())
sum.df<-read.csv("../../data/2nd_Hiseq/lofreq/all.removed.mapq_vcf.vcf_csv.csv")
sum.df<-read.csv("../../data/2nd_Hiseq/lofreq/all.removed.mapq_vcf.vcf_csv.csv",comment.char = "#")
head(sum.df)
ddply(sum.df,~ID,summarize,TP=length(which(category==T)),FP=length(which(category==F)))
mutate(sum.df,mutation=paste0(CHROM,"_",REF,POS,ALT),category=mutation %in% tp$mutant)->sum.df
tp<-read.csv("../../data/2nd_Hiseq/Prepwork/mutant_id.csv")
mutate(sum.df,mutation=paste0(CHROM,"_",REF,POS,ALT),category=mutation %in% tp$mutant)->sum.df
ddply(sum.df,~ID,summarize,TP=length(which(category==T)),FP=length(which(category==F)))
wt1<-subset(sum.df,ID=="WT1")
wt2<-subset(sum.df,ID=="WT2")
wt<-intersect(wt2$mutation,wt1$mutation)
sum.df$category[sum.df$mutation %in% wt]<-"wt"
ddply(sum.df,~ID,summarize,TP=length(which(category==T)),FP=length(which(category==F)),wt=length(which(category=="wt")))
ggplot(sum.df,aes(x=Read_pos,fill=category))+geom_histogram(position="dodge")
sum.df<-rename(sum.df,c("CHROM"="chr"))
head(sum.df)
sum.df<-rename(sum.df,c("CHROM"="chr",
"POS"="pos",
"ID"="Id",
"REF"="ref",
"ALT"="var",
"AF"="freq.var"
))
(
sum.df<-read.csv("../../data/2nd_Hiseq/lofreq/all.removed.mapq_vcf.vcf_csv.csv",comment.char = "#")
# renaming to match the deepSNV conventions
sum.df<-rename(sum.df,c("CHROM"="chr",
"POS"="pos",
"ID"="Id",
"REF"="ref",
"ALT"="var",
"AF"="freq.var"
))
tp<-read.csv("../../data/2nd_Hiseq/Prepwork/mutant_id.csv")
mutate(sum.df,mutation=paste0(chr,"_",ref,pos,alt),category=mutation %in% tp$mutant)->sum.df
mutate(sum.df,mutation=paste0(chr,"_",ref,pos,var),category=mutation %in% tp$mutant)->sum.df
ddply(sum.df,~Id,summarize,TP=length(which(category==T)),FP=length(which(category==F)))
wt1<-subset(sum.df,Id=="WT1")
wt2<-subset(sum.df,Id=="WT2")
sum.df$category[sum.df$mutation %in% wt]<-"wt"
ddply(sum.df,~ID,summarize,TP=length(which(category==T)),FP=length(which(category==F)),wt=length(which(category=="wt")))
ddply(sum.df,~Id,summarize,TP=length(which(category==T)),FP=length(which(category==F)),wt=length(which(category=="wt")))
ggplot(sum.df,aes(x=freq.var,fill=category))+geom_histogram(position="dodge")+scale_x_log10()
ggplot(sum.df,aes(x=pPhred,fill=category))+geom_histogram(position="dodge")
ggplot(sum.df,aes(x=Phred,fill=category))+geom_histogram(position="dodge")
ggplot(sum.df,aes(x=MapQ,fill=category))+geom_histogram(position="dodge")
reference.fasta<-"../../data/reference/bowtie2/wsn33_wt_plasmid.fa"
segments <- fasta.info(reference.fasta)
regions.bed <- data.frame(chr = gsub("[ ].*","", names(segments)), start=1, stop=segments, row.names=NULL)
segments <- fasta.seqlengths(reference.fasta)
regions.bed <- data.frame(chr = gsub("[ ].*","", names(segments)), start=1, stop=segments, row.names=NULL)
regions.bed<-mutate(regions.bed,chr=as.character(chr))
regions.bed<-mutate(regions.bed,chr=gsub("N_A","NA",chr))
regions.bed$chr<-factor(regions.bed$chr,levels=c("PB2","PB1","PA","HA","NP","NA","M","NS"))
regions.bed<-regions.bed[order(regions.bed$chr),]
prior.seg.length<-c()
for(k in 1:length(regions.bed$chr)){
prior.seg.length[k]<-sum(regions.bed$stop[1:k])  # the end positions of each segment relative to one sequence not including the trimming step
}
mutate(regions.bed,concat.start=start+prior.seg.length[match(chr,regions.bed$chr)],concat.stop=concat.start+stop)->regions.bed
melt(subset(regions.bed,select=-c(stop,start)),id.vars="chr")->regions.l
sum.df<-mutate(sum.df,concat.pos=pos+prior.seg.length[match(chr,regions.bed$chr)])
ggplot(subset(sum.df,category==F & grepl("5_",Id)),aes(x=concat.pos,fill=chr))+geom_histogram()#+facet_wrap(~ID)
fp<-mutate(subset(sum.df,category==F),chr.end=regions.bed$stop[match(CHROM,regions.bed$chr)],dist.stop=chr.end-POS,dist.start=POS-1)
fp$dist.end=pmin(fp$dist.stop,fp$dist.start)
fp<-mutate(subset(sum.df,category==F),chr.end=regions.bed$stop[match(chr,regions.bed$chr)],dist.stop=chr.end-pos,dist.start=POS-1)
fp<-mutate(subset(sum.df,category==F),chr.end=regions.bed$stop[match(chr,regions.bed$chr)],dist.stop=chr.end-pos,dist.start=pos-1)
fp$dist.end=pmin(fp$dist.stop,fp$dist.start)
ggplot(subset(fp,grepl("5_",ID)),aes(x=dist.end))+geom_histogram(binwidth=10)+xlab("distance from end of the segment")+ylab("number of mutatants")#+facet_wrap(~ID)
ggplot(subset(fp,grepl("5_",Id)),aes(x=dist.end))+geom_histogram(binwidth=10)+xlab("distance from end of the segment")+ylab("number of mutatants")#+facet_wrap(~ID)
setwd("~/Desktop/benchmarking_shiny/Lofreq.Hiseq")
summaries<-c("all.removed.mapq_vcf.vcf_csv.csv")
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
sum.data
sum.df<-read.csv(paste0("./data/",sum.data),stringsAsFactors=F,comment.char = '#')
head(sum.df)
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
true_snv<-read.csv("../Hiseq/data/mutant_id.csv",stringsAsFactor=F) # get the TP
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
require(reshape2)
require(plyr)
sum.data<-summaries[i]
sum.df<-read.csv(paste0("./data/",sum.data),stringsAsFactors=F,comment.char = '#')
sum.data
summaries<-c("all.removed.mapq_vcf.vcf_csv.csv")
sum.data<-summaries[i]
sum.df<-read.csv(paste0("./data/",sum.data),stringsAsFactors=F,comment.char = '#')
summaries
sum.data
summaries[1]
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
head(sum.df)
sum.df<-read.csv(paste0("./data/",sum.data),stringsAsFactors=F,comment.char = '#')
sum.df<-rename(sum.df,c("CHROM"="chr",
"POS"="pos",
"ID"="Id",
"REF"="ref",
"ALT"="var",
"AF"="freq.var"
))
mutate(sum.df,mutation=paste0(chr,"_",ref,pos,var),category=mutation %in% tp$mutant)->sum.df
sum.df$Id[sum.df$Id=="3_03"]<-"3_02" # correct a naming error
WT<-subset(sum.df,grepl("WT",Id)) # Separate WT samples
sum.df<-subset(sum.df,!(grepl("WT",Id)))
pat<-"([0-9]+)_([0-9]+)"
mutate(sum.df, gc = sub(pat,"\\1",Id),
exp.freq = sub(pat,"\\2",Id)
)-> sum.df
mutate(sum.df,exp.freq=ifelse(test = grepl("0",exp.freq),yes=as.numeric(exp.freq)/1000,no = as.numeric(exp.freq)/100))->sum.df
# TF column
unique(sum.dfId)
unique(sum.df$Id)
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
sum.df<-mutate(sum.df,p.val=10^(QUAL/10))
source('~/Desktop/benchmarking_shiny/Lofreq.Hiseq/processing.R', echo=TRUE)
setwd("~/Desktop/benchmarking_shiny_2/Lofreq.Hiseq")
shiny::runApp()
source('~/Desktop/benchmarking_shiny_2/Lofreq.Hiseq/processing.R', echo=TRUE)
names(sum.df)
source("./roc_functions.R")
pat<-"([0-9]+)_([0-9]+)"
sum.df<-read.csv("./processed_data/all.removed.mapq_vcf.vcf_csv.csv",stringsAsFactors = F)
shiny::runApp()
10^(-6.6)
shiny::runApp()
